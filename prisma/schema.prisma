// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  AGENT
}

enum ArticleStatus {
  ATTENTE
  REFUS
  ACCEPTE
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  adresse       String?
  numTel        Int?
  password      String?
  role          UserRole @default(USER)
  Authenticator Authenticator[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order[]
  Articles      Article[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Article {
  id               String   @id @default(uuid()) @map("_id")
  userId           String   @db.ObjectId
  nom              String
  description      String
  prix             Int
  usage            Boolean
  image            String
  categories       Categories      @relation(fields: [categoriesId], references: [id])
  categoriesId     String
  quantite         Int
  status           ArticleStatus @default(ATTENTE)
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  User             User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Categories {
  id           String   @id @default(uuid()) @map("_id") 
  nom          String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  articles     Article[]
}

model Order {
  id          String   @id @default(uuid()) @map("_id")
  userId      String   @db.ObjectId
  totalAmount Float
  items       Json
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User        User     @relation(fields: [userId], references: [id])
}

// New model to track actions or logs performed by Admins and Agents
// model AdminAgentLog {
//   id          String   @id @default(uuid()) @map("_id")
//   userId      String   @db.ObjectId
//   action      String
//   targetId    String? 
//   createdAt   DateTime @default(now())

//   User        User     @relation(fields: [userId], references: [id])
// }
